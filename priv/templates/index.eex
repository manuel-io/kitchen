<!Doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="<%= csrf_token %>">
    <title>KitchenLog</title>

    <style>
      @font-face {
        font-family: 'Fantasque Sans Mono';
        url('/static/fonts/FantasqueSansMono-Regular.otf') format('otf');
      }

      html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        min-width: 320px;
        height: 100%;
        min-height: 320px;
        background-color: #fff;
        color: #000;
        font-family: 'Fantasque Sans Mono';
        font-size: 1em;
        overflow-x: hidden;
      }

      body {
        position: relative;
      }

      body > aside#dish {
        position: fixed;
        top: -20px;
        left: -80px;
        z-index: 2;
        margin: 10px;
        width: 250px;
        text-align: center;
        cursor: pointer;
      }

      body > #banner {
        position: fixed;
        top: 0;
        right: 0;
        z-index: 4;
        margin: 10px;
        width: 80px;
        text-align: center;
        cursor: pointer;
      }

      body > #up {
        position: fixed;
        bottom: 0;
        right: 0;
        z-index: 4;
        margin: 10px;
        width: 80px;
        text-align: center;
        cursor: pointer;
      }

      body > header {
        position: fixed;
        top: 0;
        z-index: 3;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: flex-end;
        width: 100%;
        height: 50px;
        background-color: #fff;
        overflow: hidden;
        border-bottom: 1px solid #000;
      }

      body > header h1 {
        font-size: 1.5em;
        margin: 0 10px 0 10px;
        line-height: 50px;
      }

      body > aside#background {
        position: fixed;
        top: 0;
        z-index: 1;
        width: 100%;
        height: 100%;
        background-image: url('https://vkitchen.herokuapp.com/assets/tile.png');
      }

      body > main {
        position: absolute;
        top: 50px;
        z-index: 2;
        width: 100%;
        background-color: transparent;
      }

      body > main > nav {
        margin-top: 20px;
        margin-bottom: 20px;
        margin-left: 100px;
        background-color: #fff;
        border: 1px solid #000;
        box-sizing: border-box;
        padding: 40px;
      }

      body > main > article {
        margin-top: 20px;
        margin-bottom: 20px;
        margin-left: 100px;
        background-color: #fff;
        background-color: #fff;
        border: 1px solid #000;
        box-sizing: border-box;
        padding: 40px;
      }

      @keyframes slideout {
        0% {
          border: 1px solid #000;
          box-shadow: 2px 2px 5px 2px #fff;
          transform: translateX(0px);
        }
        25%  {
          border: 1px solid #000;
          box-shadow: 2px 2px 5px 2px #000;
          transform: translateX(0px);
        }
        50%  {
          border: 1px solid #000;
          box-shadow: 2px 2px 5px 2px #000;
          transform: translateX(-1200px);
        }
        100% {
          border: 1px solid #000;
          box-shadow: 2px 2px 5px 2px #000;
          transform: translateX(-1200px);
        }
      }

      body > main > article > div {
        box-sizing: border-box;
        background-color: #fff;
        border: 1px solid #fff;
        box-shadow: 2px 2px 5px 2px #fff;
        padding: 20px;
        overflow: hidden;
      }

      body > main > article > div:not(.active) {
        border: 1px solid #000;
        box-shadow: 2px 2px 5px 2px #000;
        transform: translateX(-1200px);
        animation-name: slideout;
        animation-duration: 5s;
      }

      body > main > article > section.active {
        position: relative;
        z-index: 300;
        transform: translateX(0px);
      }

      body > main > nav {
      }

      form {
        display: inline;
        margin: 0;
        padding: 0;
      }

      h1 {
        text-align: center;
      }

      img {
        width: 200px;
      }

      form button[type=submit]:disabled > span:first-child,
      form button[type=submit]:not(:disabled) > span:last-child {
        display: none;
      }

      form button[type=submit]:not(:disabled) > span:first-child {
        display: block;
      }

      @media (min-width: 992px) {
        body {
          max-width: 830px;
        }
      }

      @media (max-width: 992px) {
        body > main > nav {
          margin-left: 0px;
          margin-right: 0px;
        }

        body > main > article {
          margin-left: 0px;
          margin-right: 0px;
        }
      }

      label.upload {
        position: relative;
        display: inline-block;
        height: 50px;
        width: 250px;
        border: 1px solid #000;
      }

      label.upload > input {
        width: 100%;
        height: 100%;
        opacity: 0;
      }

      span.upload-custom {
        position: absolute;
        top: 0;
        z-index: 50;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
      }
    </style>
  </head>

  <body>
    <div id="banner" onclick="alert('About');">
      <img style="width:100%;" src="/static/icons/oneway.png" alt="Vegan Food">
    </div>

    <div id="up" onclick="window.scrollTo(0, 0);">
      <img style="width:50%;" src="/static/icons/arrow-circle-top.svg" alt="Up">
    </div>

    <header>
      <h1>KitchenLog</h1>
    </header>

    <aside id="dish">
      <img style="width:100%;" src="/static/icons/dish.png" alt="Dish">
    </aside>

    <aside id="background">
    </aside>

    <main>
      <nav>
        <button>Blog</button>
        <button>Rezepte</button>
      </nav>
      <article>
        <div class="active">
          <section>
            <h1>Willkommen im KitchenLog</h1>
          </section>
        </div>
      </article>
    </main>
  </body>

  <script>
    let open = (form) => {
      document.querySelector('article > div').classList.remove('active');
      fetch(form.action, { method: form.method
                         , headers: { 'x-csrf-token': document.head.querySelector('meta[name=csrf-token]').content }
                         }).then(response => {

        if (!response.ok) {
          throw Error(response.text());
        } else {
          return response.text();
        }

        }).then(data => {
          window.setTimeout((e) => {
            document.querySelector('article > div').classList.add('active');
            document.querySelector('article > div').innerHTML = data
          }, 2000);
        }).catch(data => console.log(data));
    }

    let load = (e) => {
      e.preventDefault();
      let form = e.target;
      form.submit.disabled = true;
      open(form);
    }

    let add_image = (e) => {
      e.preventDefault();
      let files = [];
      let form = e.target;
      let csrf_token = document.head.querySelector('meta[name=csrf-token]').content;

      form.submit.disabled = true;

      [...form.image.files].forEach((file, index) => {
        let data = new FormData();
        data.append('image', file);

        console.log(`${index + 1}/${form.image.files.length}`);
        console.log(file.name);
        console.log(file.type);
        console.log(file.size);

        files.push(new Promise((resolve, reject) => {

          if (file.size > 5242880) {
            return reject({ 'id': index, 'error': true, 'message': file.name + ' is oversized'});
          }

          fetch(form.action, { method: form.method
                             , body: data
                             , headers: { 'x-csrf-token': document.head.querySelector('meta[name=csrf-token]').content }
                             }).then(response => {

                               if (!response.ok) {
                                 throw Error(response.text());
                               } else {
                                 return response.text();
                               }

                             }).then(data => resolve(data)).catch(data => reject(false));
        }));
      });
        Promise.all(files).then(data => {
          let foo = document.getElementById('foo');
          data.forEach((b64) => {
            let img = new Image();
            img.src = b64;
            foo.appendChild(img);
          });
          console.log('uploads');
          form.reset();
          form.submit.disabled = false;
        }).catch(data => {
          console.log(data);
          form.submit.disabled = false;
        });
    };

    window.onload = (e) => {
      console.log(document.head.querySelector('meta[name=csrf-token]').content);
      let form = new FormData();
      form.method = 'get';
      form.action = '<%= target %>';
      alert(form.action);
      open(form);
    };
  </script>
</html>
